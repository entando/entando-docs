(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{1788:function(e,t,n){"use strict";n.r(t);var a=n(36),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),a("p",[e._v("A portal, website, web app, or mobile app built with Entando is called an Entando application.\nAn Entando application is an assembly of out of the box and/or custom built components running on the\nEntando Platform. Components can be widgets, micro frontends, microservices, page templates, WCMS content or WCMS content types.")]),e._v(" "),a("h2",{attrs:{id:"entando-app-engine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-app-engine"}},[e._v("#")]),e._v(" Entando App Engine")]),e._v(" "),a("p",[e._v("The Entando App Engine is the heart of the Entando Platform by providing the primary out-of-the-box services for\ndeveloping applications. Key features:")]),e._v(" "),a("ul",[a("li",[e._v("Expose the APIs the Entando App Builder uses to provide the page and content management interface for your application.")]),e._v(" "),a("li",[e._v("Handle the work of assembling micro frontends and microservices and combining them on specific pages as defined by the Entando App Builder.")]),e._v(" "),a("li",[e._v("Provide the data access layer to persist the page and application design.")]),e._v(" "),a("li",[e._v("Manage the cluster infrastructure.")])]),e._v(" "),a("p",[e._v("See also: "),a("RouterLink",{attrs:{to:"/v6.3/docs/reference/entando-apis.html"}},[e._v("APIs tutorial")])],1),e._v(" "),a("h2",{attrs:{id:"entando-app-builder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-app-builder"}},[e._v("#")]),e._v(" Entando App Builder")]),e._v(" "),a("p",[e._v("The Entando App Builder is the feature-rich management interface used to design and build pages for Entando applications.")]),e._v(" "),a("p",[e._v("See also: "),a("a",{attrs:{href:"../../tutorials/cms/app-builder/hello-world"}},[e._v("Widget Tutorial")])]),e._v(" "),a("h2",{attrs:{id:"entando-component-generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-component-generator"}},[e._v("#")]),e._v(" Entando Component Generator")]),e._v(" "),a("p",[e._v("The Entando Component Generator is Entando's implementation of "),a("a",{attrs:{href:"https://www.jhipster.tech/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JHipster"),a("OutboundLink")],1),e._v(" that allows users to\nquickly and efficiently generate the skeleton of an Entando Component. The Entando Component Generator provides advanced\ndata modeling capabilities including object relational mapping and automatic generation of micro frontends and microservices.\nThe generated skeleton serves as a starting point to help a development team swiftly meet the needs of the business.")]),e._v(" "),a("p",[e._v("See also: "),a("RouterLink",{attrs:{to:"/v6.3/tutorials/backend-developers/generate-microservices-and-micro-frontends.html"}},[e._v("Entando JHipster Blueprint")])],1),e._v(" "),a("h2",{attrs:{id:"entando-component-repository"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-component-repository"}},[e._v("#")]),e._v(" Entando Component Repository")]),e._v(" "),a("p",[e._v("The Entando Component Repository (ECR) is used to store and retrieve shareable components so they can be used in multiple\nEntando applications across the enterprise.")]),e._v(" "),a("p",[e._v("See also: "),a("RouterLink",{attrs:{to:"/v6.3/docs/ecr/ecr-overview.html"}},[e._v("ECR Overview")])],1),e._v(" "),a("h2",{attrs:{id:"entando-identity-management"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-identity-management"}},[e._v("#")]),e._v(" Entando Identity Management")]),e._v(" "),a("p",[e._v("Entando Identity Management is the "),a("a",{attrs:{href:"https://www.keycloak.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Keycloak"),a("OutboundLink")],1),e._v("-based token-based authentication mechanism used by the\nEntando platform. It provides the ability to add Single Sign On capabilities across multiple domains and to connect service\nproviders with identity providers.")]),e._v(" "),a("p",[e._v("See also: "),a("RouterLink",{attrs:{to:"/v6.3/tutorials/micro-frontends/authentication.html"}},[e._v("Entando Authentication")])],1),e._v(" "),a("h2",{attrs:{id:"entando-wcms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-wcms"}},[e._v("#")]),e._v(" Entando WCMS")]),e._v(" "),a("p",[e._v("The Entando Web Content Management System (WCMS) is a lightweight content and digital asset management system with support\nfor headless operation. It allows management of widgets and html fragments so they can be placed within an Entando application.")]),e._v(" "),a("p",[e._v("See also: "),a("a",{attrs:{href:"../../tutorials/cms/content-types-tutorial"}},[e._v("Content Types")]),e._v(" or "),a("a",{attrs:{href:"../../tutorials/cms/content-templates-tutorial"}},[e._v("Content Templates")])]),e._v(" "),a("h2",{attrs:{id:"entando-cluster-citizens"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-cluster-citizens"}},[e._v("#")]),e._v(" Entando Cluster Citizens")]),e._v(" "),a("p",[e._v("The purpose of this guide is to give an overview of the members of an Entando cluster and their role.")]),e._v(" "),a("h3",{attrs:{id:"architecture-diagram"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#architecture-diagram"}},[e._v("#")]),e._v(" Architecture diagram")]),e._v(" "),a("p",[e._v("Let’s start with a picture of an Entando 6 cluster and how the various\nmembers interact with each other.")]),e._v(" "),a("p",[a("img",{attrs:{src:n(853),alt:"Entando6 cluster architecture diagram"}})]),e._v(" "),a("h3",{attrs:{id:"members-of-the-cluster"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#members-of-the-cluster"}},[e._v("#")]),e._v(" Members of the cluster")]),e._v(" "),a("p",[e._v("An Entando 6 cluster is composed of various citizens which interact with\neach other. Most of these citizens have a Custom Resource Definition\nfile associated with them and are deployable on Kubernetes using the\nEntando operator and controllers.")]),e._v(" "),a("h4",{attrs:{id:"entando-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-app"}},[e._v("#")]),e._v(" Entando app")]),e._v(" "),a("p",[e._v("An Entando application is composed of three parts:")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Entando App Builder")]),e._v(": the user interface to customize and build an Entando application, as well as interact with the Entando Component Repository.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Entando App Engine")]),e._v(": the backend APIs providing access to Entando\nservices.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Entando Component Manager")]),e._v(": the service providing the Entando\nComponent Repository functionality, e.g. listing the available\nbundles, install/uninstall a bundle, etc. Check the "),a("a",{attrs:{href:"#ecm-section"}},[e._v("dedicated\nsection")]),e._v(" for more details.")])])]),e._v(" "),a("p",[e._v("The interaction between these three components (and the rest of the\nEntando cluster) use the authorization/authentication features provided\nby Keycloak.")]),e._v(" "),a("h4",{attrs:{id:"entando-component-manager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-component-manager"}},[e._v("#")]),e._v(" Entando Component Manager")]),e._v(" "),a("p",[e._v("As briefly introduced before, the Entando component manager is able to\nlist the EntandoDeBundles accessible from the EntandoApp and provide the\ninstall/uninstall services to install a bundle on an Entando App. All of\nthese services are made possible by the communication with the Entando\nKubernetes service, the only service of the Entando ecosystem (other\nthan the operator itself) able to interact with the cluster and some of\nthe Entando custom resources.")]),e._v(" "),a("h4",{attrs:{id:"entando-kubernetes-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-kubernetes-service"}},[e._v("#")]),e._v(" Entando Kubernetes Service")]),e._v(" "),a("p",[e._v("The Entando Kubernetes Service is part of the Entando cluster\ninfrastructure custom resource, and provides an access point to some of\nthe custom resources defined by Entando, in particular:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Entando applications")])]),e._v(" "),a("li",[a("p",[e._v("Entando plugins")])]),e._v(" "),a("li",[a("p",[e._v("Entando links")])]),e._v(" "),a("li",[a("p",[e._v("Entando Component Repository bundles")])])]),e._v(" "),a("p",[e._v("Some of the main services provided by the Entando Kubernetes Service\nare:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Provide a list of the available EntandoDeBundles to the\ncomponent-manager")])]),e._v(" "),a("li",[a("p",[e._v("Deploy a plugin during the installation of a bundle or discovery of\nan already available plugin and expose that to an app")])]),e._v(" "),a("li",[a("p",[e._v("Create a link between an EntandoApp and an EntandoPlugin to expose\nthe plugin’s APIs to the EntandoApp and the micro frontends (MFEs)")])])]),e._v(" "),a("h4",{attrs:{id:"entando-component-repository-bundles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-component-repository-bundles"}},[e._v("#")]),e._v(" Entando Component Repository bundles")]),e._v(" "),a("p",[e._v("An EntandoDeBundle - or Component Repository bundle - is a package with\na set of Entando components and resources. The Entando component manager\nis able to read these kind of packages and install the components to\nextend the functionalities of an EntandoApp. For more details on the\nEntandoDeBundle and the Entando Component Repository, check the\n"),a("RouterLink",{attrs:{to:"/v6.3/docs/ecr/ecr-overview.html"}},[e._v("component repository overview")]),e._v("\ndocumentation")],1),e._v(" "),a("h4",{attrs:{id:"entando-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-plugin"}},[e._v("#")]),e._v(" Entando plugin")]),e._v(" "),a("p",[e._v("An Entando plugin is a microservice that exposes APIs reusable by one or\nmore Entando apps. Usually the plugin services are exposed to the\nEntando developer and the end users via micro frontends. Check the\n"),a("a",{attrs:{href:"../../tutorials/micro-frontends/react"}},[e._v("micro frontends")]),e._v(" tutorials for more details. You can\nquickly generate an Entando plugin using the "),a("RouterLink",{attrs:{to:"/v6.3/tutorials/micro-frontends/generate-micro-frontends-from-a-database-entity/"}},[e._v("Entando JHipster Blueprint")]),e._v(". The generated project\nwill be ready to work in an Entando environment providing the\nintegration with Keycloak, generating a set of default micro frontends\nand exposing the plugin’s logic via an EntandoDeBundle (check the\nreferences for details).")],1),e._v(" "),a("h4",{attrs:{id:"keycloak"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keycloak"}},[e._v("#")]),e._v(" Keycloak")]),e._v(" "),a("p",[e._v("Keycloak in Entando 6 is responsible for authorization and\nauthentication All the members of an Entando 6 cluster interact with\nkeycloak to verify user/service authorization to perform any specific\ntask. Check out the references below for more details on keycloak.")]),e._v(" "),a("h2",{attrs:{id:"entando-ingresses"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-ingresses"}},[e._v("#")]),e._v(" Entando Ingresses")]),e._v(" "),a("h3",{attrs:{id:"what-is-an-ingress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-an-ingress"}},[e._v("#")]),e._v(" What is an ingress")]),e._v(" "),a("p",[e._v("An Ingress is a Kubernetes resource which purpose is to expose HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource.")]),e._v(" "),a("h3",{attrs:{id:"how-ingresses-are-used-in-an-entando-cluster"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-ingresses-are-used-in-an-entando-cluster"}},[e._v("#")]),e._v(" How ingresses are used in an Entando Cluster")]),e._v(" "),a("p",[e._v("When deploying an Entando Cluster, ingresses are generated for the resources that requires to be exposed to the outside world. The process of creating an ingress, setup the correct routes and the certificates is done by the via the Entando Operator and the entando custom resource controllers.")]),e._v(" "),a("h4",{attrs:{id:"keycloak-ingress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keycloak-ingress"}},[e._v("#")]),e._v(" Keycloak ingress")]),e._v(" "),a("p",[e._v("An dedicated ingress is created for keycloak to expose the authentication and authorization functionalities. Having a dedicated ingress is required to guarantee that both token issuing and token validation work correctly, even when the services using the keycloak instance are on different namespaces.")]),e._v(" "),a("h4",{attrs:{id:"cluster-infrastructure-ingress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cluster-infrastructure-ingress"}},[e._v("#")]),e._v(" Cluster infrastructure ingress")]),e._v(" "),a("p",[e._v("Another ingress is created for the cluster infrastructure services in order to expose the api endpoint to interact with the cluster correctly")]),e._v(" "),a("h4",{attrs:{id:"entando-app-ingress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-app-ingress"}},[e._v("#")]),e._v(" Entando App ingress")]),e._v(" "),a("p",[e._v("Another ingress is automatically created to expose App builder, App engine and the Entando component manager, a service part of the ECR.\nThe three containers are served under the same domain, and this is beneficial as they are able to interact without cross-origin issues.")]),e._v(" "),a("p",[e._v("The Entando App ingress is also used when linking an Entando Plugin with and Entando App, operation that usually happens when a bundle containing an Entando Plugin is installed via the ECR in an Entando App. Check out the dedicated section for details.")]),e._v(" "),a("h4",{attrs:{id:"entando-plugin-ingress"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entando-plugin-ingress"}},[e._v("#")]),e._v(" Entando Plugin ingress")]),e._v(" "),a("p",[e._v("Also Entando Plugins are automatically exposed via an ingress when deployed in an Entando Cluster.")]),e._v(" "),a("h3",{attrs:{id:"default-ingress-http-routes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default-ingress-http-routes"}},[e._v("#")]),e._v(" Default Ingress HTTP Routes")]),e._v(" "),a("p",[e._v("In this table you can see what are the default routes that are exposed for each ingress\n"),a("table",[a("colgroup",[a("col",{attrs:{width:"50%"}}),e._v(" "),a("col",{attrs:{width:"50%"}})]),e._v(" "),a("thead",[a("tr",{staticClass:"header"},[a("th",{attrs:{align:"left"}},[e._v("Ingress")]),e._v(" "),a("th",{attrs:{align:"left"}},[e._v("Ingress Http route")]),e._v(" "),a("th",{attrs:{align:"left"}},[e._v("Application")])])]),e._v(" "),a("tbody",[a("tr",{staticClass:"odd"},[a("td",{attrs:{align:"left"}},[a("p",[e._v("Keycloak ingress")])]),e._v(" "),a("td",{attrs:{align:"left"}},[a("p",[a("code",[e._v("/auth")])])]),e._v(" "),a("td",{attrs:{align:"left"}},[a("p",[e._v("Keycloak")])])]),e._v(" "),a("tr",{staticClass:"even"},[a("td",{attrs:{align:"left"}},[a("p",[e._v("Entando cluster infrastructure ingress")])]),e._v(" "),a("td",{attrs:{align:"left"}},[a("p",[a("code",[e._v("/k8s")])])]),e._v(" "),a("td",{attrs:{align:"left"}},[a("p",[e._v("Entando K8S service")])])]),e._v(" "),a("tr",{staticClass:"odd"},[a("td",{attrs:{align:"left",rowspan:"4"}},[a("p",[e._v("Entando App ingress")])]),e._v(" "),a("td",{attrs:{align:"left"}},[a("p",[a("code",[e._v("/entando-de-app")])])]),e._v(" "),a("td",{attrs:{align:"left"}},[a("p",[e._v("App engine")])])]),e._v(" "),a("tr",{staticClass:"even"},[a("td",{attrs:{align:"left"}},[a("p",[a("code",[e._v("/app-builder/")])])]),e._v(" "),a("td",{attrs:{align:"left"}},[a("p",[e._v("App builder")])])]),e._v(" "),a("tr",{staticClass:"odd"},[a("td",{attrs:{align:"left"}},[a("p",[a("code",[e._v("/digital-exchange")])])]),e._v(" "),a("td",{attrs:{align:"left"}},[a("p",[e._v("Entando component manager")])])]),e._v(" "),a("tr",{staticClass:"even"},[a("td",{attrs:{align:"left"}},[a("p",[a("code",[e._v("/<plugin-ingressPath>")])])]),e._v(" "),a("td",{attrs:{align:"left"}},[a("p",[e._v("Entando plugin linked to the app")])])]),e._v(" "),a("tr",{staticClass:"odd"},[a("td",{attrs:{align:"left"}},[a("p",[e._v("Entando plugin ingress")])]),e._v(" "),a("td",{attrs:{align:"left"}},[a("p",[a("code",[e._v("/<plugin-ingressPath>")])])]),e._v(" "),a("td",{attrs:{align:"left"}},[a("p",[e._v("Entando plugin")])])])])])]),e._v(" "),a("p",[a("strong",[e._v("Note")]),e._v(": The Entando plugin "),a("code",[e._v("ingressPath")]),e._v(" variable is defined in the Entando Plugin custom resource under the "),a("code",[e._v("spec")]),e._v(" element. The plugin ingress path is also used to expose the plugin under the Entando App domain")]),e._v(" "),a("h3",{attrs:{id:"exposing-plugins-in-the-entandoapp-domain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exposing-plugins-in-the-entandoapp-domain"}},[e._v("#")]),e._v(" Exposing plugins in the EntandoApp domain")]),e._v(" "),a("p",[e._v("The process of exposing an Entando Plugin under the same domain (ingress) of the Entando App is made possible from the creation of an "),a("code",[e._v("EntandoAppPluginLink")]),e._v(" custom resource and the corresponding controller.")]),e._v(" "),a("p",[e._v("Once the link between the Entando App and the Entando Plugin is created, the controller reads the specification of such link and automatically creates the HTTP routes in the Entando App so that the plugin is exposed on the same domain as the App builder, App engine and Component manager.")]),e._v(" "),a("p",[e._v("This allows the Microfrontend developers that need to access the plugin to not worry about CORS policy or knowing what is the full path where the plugin is exposed. The plugin is referencable using relative urls.")]),e._v(" "),a("h3",{attrs:{id:"how-to-check-ingresses-in-my-cluster"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-check-ingresses-in-my-cluster"}},[e._v("#")]),e._v(" How to check ingresses in my cluster")]),e._v(" "),a("h4",{attrs:{id:"using-the-openshift-dashboard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-the-openshift-dashboard"}},[e._v("#")]),e._v(" Using the Openshift dashboard")]),e._v(" "),a("p",[e._v("On the Openshift dashboard, Ingresses are not exposed directly as pods and deployments. The dashbaord provides direct access to the Ingress Routes (or simply routes) under the "),a("code",[e._v("Applications > Routes")]),e._v(" menu.")]),e._v(" "),a("p",[a("img",{attrs:{src:n(854),alt:"Routes panel"}})]),e._v(" "),a("p",[e._v("To see the ingress resources, you need to access them from the "),a("code",[e._v("Resources > Other resources")]),e._v(" menu. From the dropdown you should select the "),a("code",[e._v("Ingress")]),e._v(" resource and therefore you should be able to see the ingress available on that specific project/namespace")]),e._v(" "),a("p",[a("img",{attrs:{src:n(855),alt:"Ingress panel"}})]),e._v(" "),a("h4",{attrs:{id:"using-kubectl-from-the-command-line"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-kubectl-from-the-command-line"}},[e._v("#")]),e._v(" Using kubectl from the command line")]),e._v(" "),a("p",[e._v("From the command line, getting the ingress is very easy. Once you know the namespace(s) where your Entando Cluster is deployed, you simply need to use the")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("kubect get ingresses.extensions -n <namespace>\n")])])]),a("p",[e._v("Here an example of the result in a test namespace")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> kubectl get ingresses.extensions -n local\n\nNAME               CLASS    HOSTS                               ADDRESS     PORTS   AGE\nqst-eci-ingress   <none>   qst-eci-local.192.168.1.9.nip.io   127.0.0.1   80      2d1h\nqst-ingress       <none>   qst-local.192.168.1.9.nip.io       127.0.0.1   80      2d1h\nqst-kc-ingress    <none>   qst-kc-local.192.168.1.9.nip.io    127.0.0.1   80      2d1h\n")])])]),a("p",[e._v("To get more details about a specific ingress, you can use the "),a("code",[e._v("get")]),e._v(" command specifing the ingress name you want to check and the "),a("code",[e._v("yaml")]),e._v(" output format")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('> kubectl get ingresses.extensions -n local qst-ingress -o yaml\n\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  creationTimestamp: "2020-05-13T15:27:08Z"\n  generation: 1\n  labels:\n    EntandoApp: qst\n  managedFields:\n  - apiVersion: extensions/v1beta1\n    fieldsType: FieldsV1\n    fieldsV1:\n      f:status:\n        f:loadBalancer:\n          f:ingress: {}\n    manager: nginx-ingress-controller\n    operation: Update\n    time: "2020-05-13T15:27:08Z"\n  name: qst-ingress\n  namespace: local\n  ownerReferences:\n  - apiVersion: entando.org/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: EntandoApp\n    name: qst\n    uid: aa7053e1-fd8b-419f-bdee-df3018c013fa\n  resourceVersion: "16802097"\n  selfLink: /apis/extensions/v1beta1/namespaces/local/ingresses/qst-ingress\n  uid: e9b6f027-369a-4b84-b4b1-736a6e49f180\nspec:\n  rules:\n  - host: qst-local.192.168.1.9.nip.io\n    http:\n      paths:\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8080\n        path: /entando-de-app\n        pathType: ImplementationSpecific\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8083\n        path: /digital-exchange\n        pathType: ImplementationSpecific\n      - backend:\n          serviceName: qst-server-service\n          servicePort: 8081\n        path: /app-builder/\n        pathType: ImplementationSpecific\nstatus:\n  loadBalancer:\n    ingress:\n    - ip: 127.0.0.1\n')])])]),a("h3",{attrs:{id:"learn-more"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#learn-more"}},[e._v("#")]),e._v(" Learn more")]),e._v(" "),a("p",[e._v("For more details about ingress concept in Kubernetes please refer to the official documentation:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://kubernetes.io/docs/concepts/services-networking/ingress/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kubernetes Ingress documentation"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.openshift.com/container-platform/3.11/architecture/networking/routes.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Openshift Routes documentation"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports},853:function(e,t,n){e.exports=n.p+"assets/img/entando-architecture-v1.3.20bfa2ca.svg"},854:function(e,t,n){e.exports=n.p+"assets/img/openshift-routes-panel.b4956e8d.png"},855:function(e,t,n){e.exports=n.p+"assets/img/openshift-ingress-resources-panel.56f5bd81.png"}}]);